<!DOCTYPE html>
<html>
<head>
  <title>schema doc homepage</title>
  <!-- Includes all JS & CSS for the JavaScript Data Grid -->
  <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"> </script>
  <style>
  .hide-merged-cell {
    display: none;
  }
  </style>
</head>
<body>
  <h2>頁面清單</h2>
  <div id="table" style="height: 500px; width: 100%;"></div>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <script>
    const data = <%- tableData %>;

    const rowData = data.map(row => ({
      folder: row.folder,
      type: row.type,
      path: row.path,
      description: marked.parse(row.description || '')
    }));

    // ag-Grid 欄位定義
    const columnDefs = [
      {
        headerName: 'folder',
        field: 'folder',
        rowSpan: params => {
          const currentFolder = params.data.folder;
          const rowIndex = params.rowIndex;
          const allRows = params.api.getDisplayedRowCount();

          // 只在第一個出現時合併
          if (rowIndex > 0) {
            const prevNode = params.api.getDisplayedRowAtIndex(rowIndex - 1);
            if (prevNode && prevNode.data.folder === currentFolder) {
              return 1; // 後面的都不合併 (顯示空白)
            }
          }

          // 計算有幾列相同 folder
          let span = 1;
          for (let i = rowIndex + 1; i < allRows; i++) {
            const nextNode = params.api.getDisplayedRowAtIndex(i);
            if (nextNode.data.folder === currentFolder) {
              span++;
            } else {
              break;
            }
          }

          return span;
        },
        cellClassRules: {
          'hide-merged-cell': params => {
            const rowIndex = params.rowIndex;
            const currentFolder = params.data.folder;
            if (rowIndex > 0) {
              const prevNode = params.api.getDisplayedRowAtIndex(rowIndex - 1);
              return prevNode && prevNode.data.folder === currentFolder;
            }
            return false;
          }
        }
      },
      { headerName: 'type', field: 'type', sortable: true, filter: true },
      { headerName: 'path', field: 'path', sortable: true, filter: true,
        cellRenderer: params => {
          const url = window.location.origin + (params.value.startsWith('/') ? params.value : '/' + params.value);
          return `<a href="${url}">${params.value}</a>`;
        }
      },
      { headerName: 'description', field: 'description', flex: 1, autoHeight: true,
        cellRenderer: params => params.value 
      }
    ];

    // 建立 grid
    const gridOptions = {
      columnDefs,
      rowData,
      suppressRowTransform: true,
      defaultColDef: {
        resizable: true, sortable: true, filter: true
      }
    };

    // render
    agGrid.createGrid(document.getElementById('table'), gridOptions);
    </script>
</body>
</html>